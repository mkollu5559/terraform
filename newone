# Example target Key Vault names
$targetKVs = @("maneesha-test")

# Grab vault objects
$vaults = Get-AzKeyVault | Where-Object { $targetKVs -contains $_.VaultName }

# Example: Set the expiration 12 months from now
$newExpiry = (Get-Date).AddMonths(12)

# Define tags
$Tag1Key   = "ExpirationAssignedBy"
$Tag1Value = "script"

$Tag2Key   = "ExpirationSetDate"
$Tag2Value = (Get-Date -Format yyyy-MM-dd)

foreach ($vault in $vaults) {
    $vaultName = $vault.VaultName
    Write-Host "Processing Key Vault: $vaultName"

    # Get only the LATEST version of each secret in this vault
    $secrets = Get-AzKeyVaultSecret -VaultName $vaultName

    foreach ($secret in $secrets) {
        # Condition: Only proceed if this secret has NO expiration
        if (-not $secret.Attributes.Expires) {
            Write-Host "Updating expiration for secret:" $secret.Name "Version:" $secret.Version `
                       "in vault:" $vaultName

            # Build tags to preserve existing ones, then add or update your new tags
            $tags = $secret.Tags
            if (-not $tags) { $tags = @{} }

            $tags[$Tag1Key] = $Tag1Value
            $tags[$Tag2Key] = $Tag2Value

            # Use *Set-AzKeyVaultSecretAttribute* (AzureRM) or *Update-AzKeyVaultSecretAttribute* (Az) 
            # depending on which module you have installed. The example below uses Az.
            
            # Az module (newer):
            Update-AzKeyVaultSecretAttribute `
              -VaultName $vaultName `
              -Name $secret.Name `
              -Version $secret.Version `
              -Expires $newExpiry `
              -Tags $tags

            Write-Host "Set expiration to $newExpiry for secret:" $secret.Name
        }
        else {
            # Secret already has an expiration date; skip it
            Write-Host "Secret" $secret.Name "already has an expiration date. No update."
        }
    }
}
