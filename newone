# Prerequisite: Have the Az PowerShell module installed 
# and be logged in via Connect-AzAccount.

# Define required tags
$Tag1Key   = "maneesha"
$Tag1Value = "script"  # Ensures value is always "script"

$Tag2Key   = "ExpirationSetDate"
$Today     = Get-Date
$Tag2Value = $Today.ToString("yyyy-MM-dd") # Example format: 2025-03-19

# Option A: Use a predefined list of vault names:
# $vaultNames = @("<KeyVaultName1>", "<KeyVaultName2>")

# Option B: Programmatically retrieve all Key Vaults in your subscription:
$vaults = Get-AzKeyVault

foreach ($vault in $vaults) {
    $vaultName = $vault.VaultName
    Write-Host "Processing Key Vault: $vaultName"

    # Retrieve the latest version of all secrets in this Key Vault
    $secrets = Get-AzKeyVaultSecret -VaultName $vaultName
    
    foreach ($secret in $secrets) {
        # Check whether this secret has an expiration date
        if (-not $secret.Attributes.Expires) {
            Write-Host "Updating expiration for secret:" $secret.Name `
                       "Version:" $secret.Version `
                       "in vault:" $vaultName

            # Example: Set the expiration 12 months (1 year) from now
            $newExpiry = (Get-Date).AddMonths(12)

            # Construct the tags to be applied
            $tags = @{
                $Tag1Key = $Tag1Value
                $Tag2Key = $Tag2Value
            }

            # Update the existing secret's expiration date (and tags) in place
            Update-AzKeyVaultSecretAttribute `
                -VaultName $vaultName `
                -Name $secret.Name `
                -Version $secret.Version `
                -Expires $newExpiry `
                -Tags $tags

            Write-Host "Set expiration to $newExpiry for secret:" $secret.Name
        }
        else {
            Write-Host "Secret" $secret.Name "already has an expiration date. No update performed."
        }
    }

    Write-Host "Completed processing Key Vault:" $vaultName
    Write-Host "-------------------------------------------"
}
