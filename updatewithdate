# Get all Key Vaults in the subscription
$KeyVaults = Get-AzKeyVault

# Define expiration period (12 months from today)
$ExpirationDate = (Get-Date).AddMonths(12)
$Today = Get-Date -Format yyyy-MM-dd

# Define required tags
$Tag1Key = "maneesha"
$Tag1Value = "script"

$Tag2Key = "ExpirationSetDate"
$Tag2Value = $Today

# Iterate through each Key Vault
foreach ($vault in $KeyVaults) {
    $vaultName = $vault.VaultName
    Write-Host "Checking Key Vault: $vaultName"

    # Get all secrets in the Key Vault
    $Secrets = Get-AzKeyVaultSecret -VaultName $vaultName

    if ($Secrets.Count -eq 0) {
        Write-Host "No secrets found in Key Vault: $vaultName"
        continue
    }

    foreach ($secret in $Secrets) {
        $secretName = $secret.Name
        $secretDetails = Get-AzKeyVaultSecret -VaultName $vaultName -Name $secretName

        # Retrieve existing tags (if any)
        $Tags = $secretDetails.Tags
        if (-not $Tags) {
            $Tags = @{}
        }

        # Flag to check if update is needed
        $NeedsUpdate = $false

        ### **Step 1: If the secret does NOT have an expiration date, set it & add both tags** ###
        if ($null -eq $secretDetails.Expires) {
            Write-Host "Setting expiration date and adding tags for secret: $secretName in Key Vault: $vaultName"
            
            # Ensure both tags are added
            $Tags[$Tag1Key] = $Tag1Value
            $Tags[$Tag2Key] = $Tag2Value
            $NeedsUpdate = $true
        }

        ### **Step 2: If the secret has "ExpirationSetDate=<current date>", ensure it also has "maneesha=script" tag** ###
        elseif ($Tags.ContainsKey($Tag2Key) -and $Tags[$Tag2Key] -eq $Tag2Value) {
            if (-not $Tags.ContainsKey($Tag1Key) -or $Tags[$Tag1Key] -ne $Tag1Value) {
                Write-Host "Adding missing tag '$Tag1Key=$Tag1Value' to secret: $secretName in Key Vault: $vaultName"
                $Tags[$Tag1Key] = $Tag1Value
                $NeedsUpdate = $true
            }
        }

        # Apply updates only if needed
        if ($NeedsUpdate) {
            try {
                # Update secret attributes (expiration date & tags) **without creating a new version**
                Set-AzKeyVaultSecretAttribute -VaultName $vaultName -Name $secretName -Expires $ExpirationDate -Tags $Tags

                Write-Host "Secret '$secretName' updated with expiration date and required tags."
            }
            catch {
                Write-Host "Error updating secret '$secretName' in Key Vault: $vaultName - $_" -ForegroundColor Red
            }
        }
        else {
            Write-Host "No changes needed for secret: $secretName"
        }
    }
}

Write-Host "Script execution completed."
