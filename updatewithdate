# Get all Key Vaults in the subscription
$KeyVaults = Get-AzKeyVault

# Define expiration period (12 months from today)
$ExpirationDate = (Get-Date).AddMonths(12)

# Define the tag to add when setting expiration
$TagKey = "maneesha"
$TagValue = "script"

# Iterate through each Key Vault
foreach ($vault in $KeyVaults) {
    $vaultName = $vault.VaultName
    Write-Host "Checking Key Vault: $vaultName"

    # Get all secrets in the Key Vault
    $Secrets = Get-AzKeyVaultSecret -VaultName $vaultName

    if ($Secrets.Count -eq 0) {
        Write-Host "No secrets found in Key Vault: $vaultName"
        continue
    }

    foreach ($secret in $Secrets) {
        $secretName = $secret.Name
        $secretDetails = Get-AzKeyVaultSecret -VaultName $vaultName -Name $secretName

        # Check if the secret is missing an expiration date
        if ($null -eq $secretDetails.Expires) {
            Write-Host "Setting expiration date for secret: $secretName in Key Vault: $vaultName"

            try {
                # Retrieve existing tags (if any) and add the new tag
                $Tags = $secretDetails.Tags
                if (-not $Tags) {
                    $Tags = @{}
                }
                $Tags[$TagKey] = $TagValue  # Add or update the new tag

                # Update secret attributes (expiration date & tag) **without creating a new version**
                Set-AzKeyVaultSecretAttribute -VaultName $vaultName -Name $secretName -Expires $ExpirationDate -Tags $Tags

                Write-Host "Secret '$secretName' updated with expiration date: $ExpirationDate and tag '$TagKey=$TagValue'."
            }
            catch {
                Write-Host "Error updating expiration date for secret '$secretName' in Key Vault: $vaultName - $_" -ForegroundColor Red
            }
        }
        else {
            Write-Host "Secret '$secretName' already has an expiration date ($($secretDetails.Expires)). Skipping."
        }
    }
}

Write-Host "Script execution completed."
