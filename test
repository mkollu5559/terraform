$allKeyVaults = Get-AzKeyVault

foreach ($vault in $allKeyVaults) {
    $vaultName = $vault.VaultName
    Write-Host "======================================="
    Write-Host "Vault: $vaultName"
    Write-Host "======================================="
    
    # Get all secrets from this vault
    $allSecrets = Get-AzKeyVaultSecret -VaultName $vaultName

    foreach ($Secret in $allSecrets) {
        $secretName = $Secret.Name
        Write-Host "Processing Secret: $secretName"

        # Get all versions of this secret
        $versions = Get-AzKeyVaultSecret -VaultName $vaultName -Name $secretName -IncludeVersions

        # If no versions exist, skip to the next secret
        if (-not $versions) {
            Write-Host "No versions returned for: $secretName"
            Write-Host ""
            Continue
        }

        # Get the current/latest version
        $currentVersionId = ($Secret.Id -split "/")[-1]

        # Filter out any version that HAS an "ExpirationSetDate" tag
        $filteredVersions = $versions | Where-Object {
            $_.Tags -is $null -or -not ($_.Tags.ContainsKey("ExpirationSetDate"))
        }

        # Sort by creation time DESCENDING (newest first) and select the first one
        $newestVersion = $filteredVersions | Sort-Object Created -Descending | Select-Object -First 1

        # If we have no versions left after filtering, skip to the next secret
        if (-not $newestVersion) {
            Write-Host "No matching versions found (all had an 'ExpirationSetDate' tag)."
            Write-Host ""
            Continue
        }

        # Extract the selected version ID
        $selectedVersionId = ($newestVersion.Id -split "/")[-1]

        # NEW FEATURE: Check if this is NOT the current version
        if ($selectedVersionId -ne $currentVersionId) {
            Write-Host "WARNING: This is NOT the current version for $vaultName -> $secretName"
            Write-Host "    Selected Version: $selectedVersionId"
            Write-Host "    Current Version:  $currentVersionId"
            Write-Host ""
        }

        # Print results
        Write-Host "Newest version WITHOUT 'ExpirationSetDate' tag:"
        Write-Host "    VersionId: $selectedVersionId"
        Write-Host "    Created: $($newestVersion.Created)"

        # Retrieve the secretâ€™s plaintext value (assuming the .Value property has it)
        $secretValue = Get-AzKeyVaultSecret -VaultName $vaultName -Name $secretName -Version $selectedVersionId -AsPlainText

        # Check if secret value is empty or null
        if (-not $secretValue) {
            Write-Host "ERROR: Secret value is empty or null."
        }
        elseif ($secretValue -eq "") {
            Write-Host "ERROR: Secret value is exactly ''."
        }

        Write-Host ""
    }
}
