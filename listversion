# Make sure you're authenticated:
#   Connect-AzAccount
# If you have multiple subscriptions, set the context if needed:
#   Set-AzContext -Subscription "YOUR_SUBSCRIPTION_ID_OR_NAME"

# Get all Key Vaults in the currently selected subscription
$allKeyVaults = Get-AzKeyVault

foreach ($vault in $allKeyVaults) {
    $vaultName = $vault.VaultName
    Write-Host "==================================================="
    Write-Host "Vault: $vaultName"
    Write-Host "==================================================="

    # Get the (latest) version of all secrets to discover their names
    $allSecrets = Get-AzKeyVaultSecret -VaultName $vaultName

    foreach ($secret in $allSecrets) {
        $secretName = $secret.Name
        Write-Host "  Processing Secret: $secretName"

        # 1) Get ALL versions of this secret
        $versions = Get-AzKeyVaultSecret `
            -VaultName $vaultName `
            -Name $secretName `
            -IncludeVersions

        # If we have no versions, skip to the next secret
        if (-not $versions) {
            Write-Host "    No versions returned for secret '$secretName'."
            Write-Host ""
            continue
        }

        # 2) Filter out any version that HAS an ExpirationDate tag
        #    Keep versions that do not have that tag – even if they have no tags at all
        $filteredVersions = $versions | Where-Object {
            -not (($_.Tags) -and ($_.Tags.ContainsKey("ExpirationDate")))
        }

        # 3) Sort by creation time DESCENDING (newest first) and select the first one
        $newestVersion = $filteredVersions |
            Sort-Object Created -Descending |
            Select-Object -First 1

        # 4) Print results
        if ($newestVersion) {
            Write-Host "    Newest version WITHOUT 'ExpirationDate' tag (including no-tag versions):"
            Write-Host "      VersionId: $($newestVersion.Id)"
            Write-Host "      Created:   $($newestVersion.Created)"

            # Retrieve the secret’s plaintext value (assuming the .Value property has it)
            $secretValue = $newestVersion.Value

            # If the value is null/empty or exactly '{', print an error message
            # Otherwise, print the plaintext secret
            if (-not $secretValue) {
                Write-Host "      ERROR: Secret value is empty or null."
            }
            elseif ($secretValue -eq '{') {
                Write-Host "      ERROR: Secret value is exactly '{'."
            }
            else {
                Write-Host "      Secret Value (plaintext): $secretValue"
            }
        }
        else {
            Write-Host "    No matching versions found (all had an 'ExpirationDate' tag)."
        }

        Write-Host ""
    }
}
